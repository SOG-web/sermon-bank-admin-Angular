{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport * as i3 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i4 from '@ngx-formly/core/select';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i1 from '@angular/material/checkbox';\nimport { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\n\nfunction FormlyFieldMultiCheckbox_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-checkbox\", 1);\n    i0.ɵɵlistener(\"change\", function FormlyFieldMultiCheckbox_ng_container_0_Template_mat_checkbox_change_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const option_r1 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onChange(option_r1.value, $event.checked));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", ctx_r0.id + \"_\" + i_r2)(\"formlyAttributes\", ctx_r0.field)(\"tabIndex\", ctx_r0.props.tabindex)(\"color\", ctx_r0.props.color)(\"labelPosition\", ctx_r0.props.labelPosition)(\"checked\", ctx_r0.isChecked(option_r1))(\"disabled\", ctx_r0.formControl.disabled || option_r1.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r1.label, \" \");\n  }\n}\n\nlet FormlyFieldMultiCheckbox = /*#__PURE__*/(() => {\n  class FormlyFieldMultiCheckbox extends FieldType {\n    constructor() {\n      super(...arguments);\n      this.defaultOptions = {\n        props: {\n          hideFieldUnderline: true,\n          floatLabel: 'always',\n          color: 'accent' // workaround for https://github.com/angular/components/issues/18465\n\n        }\n      };\n    }\n\n    onChange(value, checked) {\n      this.formControl.markAsDirty();\n\n      if (this.props.type === 'array') {\n        this.formControl.patchValue(checked ? [...(this.formControl.value || []), value] : [...(this.formControl.value || [])].filter(o => o !== value));\n      } else {\n        this.formControl.patchValue(Object.assign(Object.assign({}, this.formControl.value), {\n          [value]: checked\n        }));\n      }\n\n      this.formControl.markAsTouched();\n    } // TODO: find a solution to prevent scroll on focus\n\n\n    onContainerClick() {}\n\n    isChecked(option) {\n      const value = this.formControl.value;\n      return value && (this.props.type === 'array' ? value.indexOf(option.value) !== -1 : value[option.value]);\n    }\n\n  }\n\n  FormlyFieldMultiCheckbox.ɵfac = /* @__PURE__ */function () {\n    let ɵFormlyFieldMultiCheckbox_BaseFactory;\n    return function FormlyFieldMultiCheckbox_Factory(t) {\n      return (ɵFormlyFieldMultiCheckbox_BaseFactory || (ɵFormlyFieldMultiCheckbox_BaseFactory = i0.ɵɵgetInheritedFactory(FormlyFieldMultiCheckbox)))(t || FormlyFieldMultiCheckbox);\n    };\n  }();\n\n  FormlyFieldMultiCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FormlyFieldMultiCheckbox,\n    selectors: [[\"formly-field-mat-multicheckbox\"]],\n    viewQuery: function FormlyFieldMultiCheckbox_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatCheckbox, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkboxes = _t);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function FormlyFieldMultiCheckbox_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx.id);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 6,\n    consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"id\", \"formlyAttributes\", \"tabIndex\", \"color\", \"labelPosition\", \"checked\", \"disabled\", \"change\"]],\n    template: function FormlyFieldMultiCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, FormlyFieldMultiCheckbox_ng_container_0_Template, 3, 8, \"ng-container\", 0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵpipe(2, \"formlySelectOptions\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(1, 1, i0.ɵɵpipeBind2(2, 3, ctx.props.options, ctx.field)));\n      }\n    },\n    dependencies: [i1.MatCheckbox, i2.NgForOf, i3.ɵFormlyAttributes, i2.AsyncPipe, i4.FormlySelectOptionsPipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FormlyFieldMultiCheckbox;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet FormlyMatMultiCheckboxModule = /*#__PURE__*/(() => {\n  class FormlyMatMultiCheckboxModule {}\n\n  FormlyMatMultiCheckboxModule.ɵfac = function FormlyMatMultiCheckboxModule_Factory(t) {\n    return new (t || FormlyMatMultiCheckboxModule)();\n  };\n\n  FormlyMatMultiCheckboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FormlyMatMultiCheckboxModule\n  });\n  FormlyMatMultiCheckboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatCheckboxModule, FormlyMatFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n      types: [{\n        name: 'multicheckbox',\n        component: FormlyFieldMultiCheckbox,\n        wrappers: ['form-field']\n      }]\n    })]]\n  });\n  return FormlyMatMultiCheckboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FormlyFieldMultiCheckbox, FormlyMatMultiCheckboxModule }; //# sourceMappingURL=ngx-formly-material-multicheckbox.mjs.map","map":null,"metadata":{},"sourceType":"module"}