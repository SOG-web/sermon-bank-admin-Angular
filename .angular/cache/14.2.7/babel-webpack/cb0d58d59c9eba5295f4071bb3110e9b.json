{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ViewChild, NgModule, Type, Directive, ViewChildren } from '@angular/core';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ngx-formly/core';\nimport { FieldWrapper, ɵdefineHiddenProp, FormlyModule, FieldType as FieldType$1, ɵobserve } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/material/form-field';\nimport { MatFormField, MatFormFieldModule, MatFormFieldControl } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/a11y';\nimport { Subject } from 'rxjs';\n\nfunction FormlyWrapperFormField_mat_label_3_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1, \"*\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormlyWrapperFormField_mat_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-label\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, FormlyWrapperFormField_mat_label_3_span_2_Template, 2, 0, \"span\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.props.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.props.required && ctx_r1.props.hideRequiredMarker !== true);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    field: a0\n  };\n};\n\nfunction FormlyWrapperFormField_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 10);\n    i0.ɵɵelementContainer(1, 11);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.props.prefix)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r2.field));\n  }\n}\n\nfunction FormlyWrapperFormField_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 12);\n    i0.ɵɵelementContainer(1, 11);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.props.suffix)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r3.field));\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    content: a0\n  };\n};\n\nfunction FormlyWrapperFormField_mat_hint_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-hint\");\n    i0.ɵɵelementContainer(1, 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const hint_r9 = ctx.ngIf;\n    i0.ɵɵnextContext();\n\n    const _r6 = i0.ɵɵreference(11);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r6)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, hint_r9));\n  }\n}\n\nfunction FormlyWrapperFormField_mat_hint_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-hint\", 13);\n    i0.ɵɵelementContainer(1, 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const hintEnd_r10 = ctx.ngIf;\n    i0.ɵɵnextContext();\n\n    const _r6 = i0.ɵɵreference(11);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r6)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, hintEnd_r10));\n  }\n}\n\nfunction FormlyWrapperFormField_ng_template_10_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const content_r11 = i0.ɵɵnextContext().content;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(content_r11);\n  }\n}\n\nfunction FormlyWrapperFormField_ng_template_10_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 11);\n  }\n\n  if (rf & 2) {\n    const content_r11 = i0.ɵɵnextContext().content;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", content_r11)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r14.field));\n  }\n}\n\nfunction FormlyWrapperFormField_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, FormlyWrapperFormField_ng_template_10_ng_container_0_Template, 2, 1, \"ng-container\", 14);\n    i0.ɵɵtemplate(1, FormlyWrapperFormField_ng_template_10_ng_template_1_Template, 1, 4, \"ng-template\", null, 15, i0.ɵɵtemplateRefExtractor);\n  }\n\n  if (rf & 2) {\n    const content_r11 = ctx.content;\n\n    const _r13 = i0.ɵɵreference(2);\n\n    i0.ɵɵproperty(\"ngIf\", !content_r11.createEmbeddedView)(\"ngIfElse\", _r13);\n  }\n}\n\nconst _c2 = [\"matPrefix\"];\nconst _c3 = [\"matSuffix\"];\nlet FormlyWrapperFormField = /*#__PURE__*/(() => {\n  class FormlyWrapperFormField extends FieldWrapper {\n    constructor(renderer, elementRef, focusMonitor) {\n      super();\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n      this.focusMonitor = focusMonitor;\n    }\n\n    ngOnInit() {\n      ɵdefineHiddenProp(this.field, '_formField', this.formField);\n      this.focusMonitor.monitor(this.elementRef, true).subscribe(origin => {\n        if (!origin && this.field.focus) {\n          this.field.focus = false;\n        }\n      });\n    }\n\n    ngAfterViewInit() {\n      // temporary fix for https://github.com/angular/material2/issues/7891\n      if (this.formField.appearance !== 'outline' && this.props.hideFieldUnderline === true) {\n        const underlineElement = this.formField._elementRef.nativeElement.querySelector('.mat-form-field-underline');\n\n        underlineElement && this.renderer.removeChild(underlineElement.parentNode, underlineElement);\n      }\n    }\n\n    ngOnDestroy() {\n      delete this.field._formField;\n      this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n\n  }\n\n  FormlyWrapperFormField.ɵfac = function FormlyWrapperFormField_Factory(t) {\n    return new (t || FormlyWrapperFormField)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n  };\n\n  FormlyWrapperFormField.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FormlyWrapperFormField,\n    selectors: [[\"formly-wrapper-mat-form-field\"]],\n    viewQuery: function FormlyWrapperFormField_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatFormField, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formField = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 12,\n    vars: 10,\n    consts: [[3, \"hideRequiredMarker\", \"floatLabel\", \"appearance\", \"color\"], [\"fieldComponent\", \"\"], [4, \"ngIf\"], [\"matPrefix\", \"\", 4, \"ngIf\"], [\"matSuffix\", \"\", 4, \"ngIf\"], [3, \"field\"], [\"align\", \"end\", 4, \"ngIf\"], [\"stringOrTemplate\", \"\"], [\"aria-hidden\", \"true\", \"class\", \"mat-form-field-required-marker\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 1, \"mat-form-field-required-marker\"], [\"matPrefix\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"matSuffix\", \"\"], [\"align\", \"end\"], [4, \"ngIf\", \"ngIfElse\"], [\"template\", \"\"]],\n    template: function FormlyWrapperFormField_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n        i0.ɵɵelementContainer(1, null, 1);\n        i0.ɵɵtemplate(3, FormlyWrapperFormField_mat_label_3_Template, 3, 2, \"mat-label\", 2);\n        i0.ɵɵtemplate(4, FormlyWrapperFormField_ng_container_4_Template, 2, 4, \"ng-container\", 3);\n        i0.ɵɵtemplate(5, FormlyWrapperFormField_ng_container_5_Template, 2, 4, \"ng-container\", 4);\n        i0.ɵɵelementStart(6, \"mat-error\");\n        i0.ɵɵelement(7, \"formly-validation-message\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, FormlyWrapperFormField_mat_hint_8_Template, 2, 4, \"mat-hint\", 2);\n        i0.ɵɵtemplate(9, FormlyWrapperFormField_mat_hint_9_Template, 2, 4, \"mat-hint\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(10, FormlyWrapperFormField_ng_template_10_Template, 3, 2, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"hideRequiredMarker\", true)(\"floatLabel\", ctx.props.floatLabel)(\"appearance\", ctx.props.appearance)(\"color\", ctx.props.color);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.props.label && ctx.props.hideLabel !== true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.props.prefix);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.props.suffix);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"field\", ctx.field);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.props.description || ctx.props.hintStart);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.props.hintEnd);\n      }\n    },\n    dependencies: [i2.MatFormField, i3.ɵFormlyValidationMessage, i4.NgIf, i2.MatLabel, i2.MatPrefix, i4.NgTemplateOutlet, i2.MatSuffix, i2.MatError, i2.MatHint],\n    styles: [\"formly-wrapper-mat-form-field .mat-form-field{width:100%}\\n\"],\n    encapsulation: 2\n  });\n  return FormlyWrapperFormField;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet FormlyMatFormFieldModule = /*#__PURE__*/(() => {\n  class FormlyMatFormFieldModule {}\n\n  FormlyMatFormFieldModule.ɵfac = function FormlyMatFormFieldModule_Factory(t) {\n    return new (t || FormlyMatFormFieldModule)();\n  };\n\n  FormlyMatFormFieldModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FormlyMatFormFieldModule\n  });\n  FormlyMatFormFieldModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatFormFieldModule, FormlyModule.forChild({\n      wrappers: [{\n        name: 'form-field',\n        component: FormlyWrapperFormField\n      }]\n    })]]\n  });\n  return FormlyMatFormFieldModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet FieldType = /*#__PURE__*/(() => {\n  class FieldType extends FieldType$1 {\n    constructor() {\n      super(...arguments);\n      this.errorStateMatcher = {\n        isErrorState: () => this.field && this.showError\n      };\n      this.stateChanges = new Subject();\n      this._errorState = false;\n    }\n\n    set matPrefix(prefix) {\n      if (prefix) {\n        this.props.prefix = prefix;\n      }\n    }\n\n    set matSuffix(suffix) {\n      if (suffix) {\n        this.props.suffix = suffix;\n      }\n    }\n\n    set _controls(controls) {\n      this.attachControl(controls.length === 1 ? controls.first : this);\n    }\n\n    ngOnDestroy() {\n      var _a;\n\n      (_a = this.formField) === null || _a === void 0 ? true : delete _a._control;\n      this.stateChanges.complete();\n    }\n\n    setDescribedByIds(_ids) {}\n\n    onContainerClick(_event) {\n      this.field.focus = true;\n      this.stateChanges.next();\n    }\n\n    get errorState() {\n      const showError = this.options.showError(this);\n\n      if (showError !== this._errorState) {\n        this._errorState = showError;\n        this.stateChanges.next();\n      }\n\n      return showError;\n    }\n\n    get controlType() {\n      if (this.props.type) {\n        return this.props.type;\n      }\n\n      const type = this.field.type;\n      return type instanceof Type ? type.prototype.constructor.name : type;\n    }\n\n    get focused() {\n      return !!this.field.focus && !this.disabled;\n    }\n\n    get disabled() {\n      return !!this.props.disabled;\n    }\n\n    get required() {\n      return !!this.props.required;\n    }\n\n    get placeholder() {\n      return this.props.placeholder || '';\n    }\n\n    get shouldPlaceholderFloat() {\n      return this.shouldLabelFloat;\n    }\n\n    get value() {\n      var _a;\n\n      return (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.value;\n    }\n\n    set value(value) {\n      var _a;\n\n      (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.patchValue(value);\n    }\n\n    get ngControl() {\n      return this.formControl;\n    }\n\n    get empty() {\n      return this.value == null || this.value === '';\n    }\n\n    get shouldLabelFloat() {\n      return this.focused || !this.empty;\n    }\n\n    get formField() {\n      var _a;\n\n      return (_a = this.field) === null || _a === void 0 ? void 0 : _a['_formField'];\n    }\n\n    attachControl(control) {\n      var _a;\n\n      if (this.formField && control !== this.formField._control) {\n        this.formField._control = control; // temporary fix for https://github.com/angular/material2/issues/6728\n\n        const ngControl = control === null || control === void 0 ? void 0 : control.ngControl;\n\n        if ((_a = ngControl === null || ngControl === void 0 ? void 0 : ngControl.valueAccessor) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('_formField')) {\n          ngControl.valueAccessor['_formField'] = this.formField;\n        }\n\n        ['prefix', 'suffix'].forEach(type => ɵobserve(this.field, ['props', type], ({\n          currentValue\n        }) => currentValue && Promise.resolve().then(() => {\n          this.options.detectChanges(this.field);\n        }))); // https://github.com/angular/components/issues/16209\n\n        const setDescribedByIds = control.setDescribedByIds.bind(control);\n\n        control.setDescribedByIds = ids => {\n          setTimeout(() => setDescribedByIds(ids));\n        };\n      }\n    }\n\n  }\n\n  FieldType.ɵfac = /* @__PURE__ */function () {\n    let ɵFieldType_BaseFactory;\n    return function FieldType_Factory(t) {\n      return (ɵFieldType_BaseFactory || (ɵFieldType_BaseFactory = i0.ɵɵgetInheritedFactory(FieldType)))(t || FieldType);\n    };\n  }();\n\n  FieldType.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FieldType,\n    viewQuery: function FieldType_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(MatFormFieldControl, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matPrefix = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matSuffix = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._controls = _t);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return FieldType;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FieldType, FormlyMatFormFieldModule }; //# sourceMappingURL=ngx-formly-material-form-field.mjs.map","map":null,"metadata":{},"sourceType":"module"}