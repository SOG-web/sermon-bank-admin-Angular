{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i3 from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i2 from '@angular/material/checkbox';\nimport { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i1 from '@angular/cdk/a11y';\n\nfunction FormlyFieldCheckbox_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 2);\n    i0.ɵɵtext(1, \"*\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nlet FormlyFieldCheckbox = /*#__PURE__*/(() => {\n  class FormlyFieldCheckbox extends FieldType {\n    constructor(renderer, focusMonitor) {\n      super();\n      this.renderer = renderer;\n      this.focusMonitor = focusMonitor;\n      this.defaultOptions = {\n        props: {\n          hideFieldUnderline: true,\n          indeterminate: true,\n          floatLabel: 'always',\n          hideLabel: true,\n          color: 'accent' // workaround for https://github.com/angular/components/issues/18465\n\n        }\n      };\n    }\n\n    onContainerClick(event) {\n      this.checkbox.focus();\n      super.onContainerClick(event);\n    }\n\n    ngAfterViewInit() {\n      if (this.checkbox) {\n        this.focusMonitor.monitor(this.checkbox._inputElement, true).subscribe(focusOrigin => {\n          if (focusOrigin) {\n            this.props.focus && this.props.focus(this.field);\n          } else {\n            this.props.blur && this.props.blur(this.field);\n          }\n        });\n      }\n    }\n\n    ngAfterViewChecked() {\n      if (this.required !== this._required && this.checkbox && this.checkbox._inputElement) {\n        this._required = this.required;\n        const inputElement = this.checkbox._inputElement.nativeElement;\n\n        if (this.required) {\n          this.renderer.setAttribute(inputElement, 'required', 'required');\n        } else {\n          this.renderer.removeAttribute(inputElement, 'required');\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n\n      if (this.checkbox) {\n        this.focusMonitor.stopMonitoring(this.checkbox._inputElement);\n      }\n    }\n\n  }\n\n  FormlyFieldCheckbox.ɵfac = function FormlyFieldCheckbox_Factory(t) {\n    return new (t || FormlyFieldCheckbox)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n  };\n\n  FormlyFieldCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FormlyFieldCheckbox,\n    selectors: [[\"formly-field-mat-checkbox\"]],\n    viewQuery: function FormlyFieldCheckbox_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatCheckbox, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkbox = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 9,\n    consts: [[3, \"formControl\", \"id\", \"formlyAttributes\", \"tabIndex\", \"indeterminate\", \"color\", \"labelPosition\"], [\"aria-hidden\", \"true\", \"class\", \"mat-form-field-required-marker\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 1, \"mat-form-field-required-marker\"]],\n    template: function FormlyFieldCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-checkbox\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵtemplate(2, FormlyFieldCheckbox_span_2_Template, 2, 0, \"span\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formControl\", ctx.formControl)(\"id\", ctx.id)(\"formlyAttributes\", ctx.field)(\"tabIndex\", ctx.props.tabindex)(\"indeterminate\", ctx.props.indeterminate && ctx.formControl.value == null)(\"color\", ctx.props.color)(\"labelPosition\", ctx.props.labelPosition);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.props.label, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.props.required && ctx.props.hideRequiredMarker !== true);\n      }\n    },\n    dependencies: [i2.MatCheckbox, i3.NgControlStatus, i3.FormControlDirective, i4.ɵFormlyAttributes, i5.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FormlyFieldCheckbox;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet FormlyMatCheckboxModule = /*#__PURE__*/(() => {\n  class FormlyMatCheckboxModule {}\n\n  FormlyMatCheckboxModule.ɵfac = function FormlyMatCheckboxModule_Factory(t) {\n    return new (t || FormlyMatCheckboxModule)();\n  };\n\n  FormlyMatCheckboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FormlyMatCheckboxModule\n  });\n  FormlyMatCheckboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatCheckboxModule, FormlyMatFormFieldModule, FormlyModule.forChild({\n      types: [{\n        name: 'checkbox',\n        component: FormlyFieldCheckbox,\n        wrappers: ['form-field']\n      }, {\n        name: 'boolean',\n        extends: 'checkbox'\n      }]\n    })]]\n  });\n  return FormlyMatCheckboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FormlyFieldCheckbox, FormlyMatCheckboxModule }; //# sourceMappingURL=ngx-formly-material-checkbox.mjs.map","map":null,"metadata":{},"sourceType":"module"}